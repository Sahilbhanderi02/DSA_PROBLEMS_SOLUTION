You are given an integer array nums of length n, and an integer array queries of length m.

Return an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i].

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [4,5,2,1], queries = [3,10,21]
Output: [2,3,4]
Explanation: We answer the queries as follows:
- The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2.
- The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3.
- The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4.


Example 2:

Input: nums = [2,3,4,5], queries = [1]
Output: [0]
Explanation: The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0.
 

Constraints:

n == nums.length
m == queries.length
1 <= n, m <= 1000
1 <= nums[i], queries[i] <= 106


Solution 1 : 


    public int[] answerQueries(int[] nums, int[] queries) {
        Arrays.sort(nums);
        int []pre=new int[nums.length];
        pre[0]=nums[0];
        for(int i=1 ; i <nums.length;i++)
        {
            pre[i]=pre[i-1]+nums[i];
        }
        int m=queries.length;
        int ans[]=new int [m];

        for(int i =0; i <m; i++)// note this is wrog because har query ke liye ek answer hoga nahi ki given nums raay kis liye  i <nums.length
        {
            int lo=0;
            int hi=pre.length-1;  //aya m-1 nai avshe binary serch apde prefix ma apply karvi chavi atle eni length avshe
            while(lo<=hi)
            {
                int mid=lo+(hi-lo)/2;
                if(pre[mid]>queries[i]) hi=mid-1;
                else 
                {
                    ans[i]=Math.max(ans[i],mid+1);  //mid+1 length hai
                    lo=mid+1;
                }
            }
        }
        return ans;

    }

TC : nlogn (sort)+ n(prefix)+ mlogn (binary search for m query elements) 
   : O( (n+m)logn) 
   : O(nlogn)  as m<=n

SC : O(n)  // if permission to modify the given also given then also logn(merge sort) or n for sorting 
