
Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2


Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107



Solution 1 : Brute Force

    public int subarraySum(int[] nums, int k) {

        int count =0;
        for(int i=0;i<nums.length;i++)
        {
            int sum=0;
            for(int j=i ; j<nums.length ; j++)
            {
                sum+=nums[j];
                if(sum==k) count++;
            }
        }
        return count;
    }

TC :O(n2)
SC :O(1)


Solution 2 : PrefixSum AND HashMap


    public int subarraySum(int[] nums, int k) {

        int count =0;
        int[]pre=new int[nums.length];
        pre[0]=nums[0];
        for(int i=1;i<nums.length;i++)
        {
            pre[i]= pre[i-1] + nums[i] ;
        }
        HashMap<Integer,Integer> map=new HashMap<>();

        for(int i=0;i<nums.length;i++)
        {
            int ele=pre[i];
            if(ele==k) count++;
            
            int rem=ele-k ;

            if(map.containsKey(rem))
            {
                int freq=map.get(rem);
                count+=freq;
            }
            // else
            // {
            //     map.put( pre[i] , 1);  // dont put remaining in the map
            // }
            if(map.containsKey(ele))
            {
                int freq=map.get(ele);
                map.put(ele,freq+1);
            }
            else map.put(ele,1);
        }
        return count;
    }


TC : O(n)
SC : O(n) // eeven if modification in given is allowed then also we needed hashmap which is size of n 