Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.

 

Example 1:

Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.


Example 2:

Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].


Example 3:

Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.




Solution 2 : Sliding Window 

    public int longestSubarray(int[] nums) {
        if(nums.length==1) return 0;

        int maxSize=0;
        boolean zeroPresent=false;
        int i=0,j=1 ;
        int zeroIdx=-1; 

        if( nums[i]==0 ) 
        {
            zeroPresent=true;
            zeroIdx=0;
        }
        // if( nums[j]==0 ) 
        // {
        //     zeroPresent=true;
        //     zeroIdx=1;
        // }


        while( j <= nums.length-1 )
        {
            int size=0;
            if( nums[j]== 0)
            {
                if(zeroPresent)
                {
                    i=zeroIdx+1;
                    zeroIdx=j;
                    size=j-i;
                    if(size>maxSize) maxSize=size;
                }
                else  // pehle se xero nahi tha 
                {
                    zeroPresent=true;
                    zeroIdx=j;
                    size=j-i;
                    if(size>maxSize) maxSize=size;
                }

            }
            else  //matlab 1 aya hai 
            {
                if(zeroPresent)  // matlab andar ek zero hai 
                {
                    size=j-i;
                    if(size>maxSize) maxSize=size;
                }
                else
                {
                    size=j-i;
                    if(size>maxSize) maxSize=size;
                }
            }
            j++;
        }
        return maxSize;
    }


//REDUCED CODE BY TAKING COMMON OUT 

public int longestSubarray(int[] nums) {
        if(nums.length==1) return 0;

        int maxSize=0;
        boolean zeroPresent=false;
        int i=0,j=1 ;
        int zeroIdx=-1; 

        if( nums[i]==0 ) 
        {
            zeroPresent=true;
            zeroIdx=0;
        }

        while( j <= nums.length-1 )
        {
            int size=0;
            if( nums[j]== 0)
            {
                if(zeroPresent)
                {
                    i=zeroIdx+1;
                    zeroIdx=j;
                }
                else  // pehle se xero nahi tha 
                {
                    zeroPresent=true;
                    zeroIdx=j;
                }
            }
            size=j-i;
            if(size>maxSize) maxSize=size;
            j++;
        }
        return maxSize;
    }

TC :O(N)
SC :O(N) INCLUDING GIVEN OTHERWISE O(1)