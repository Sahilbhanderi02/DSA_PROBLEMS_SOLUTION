Given an array arr, where each element is at most k away from its target position, you need to sort the array optimally.
Note: DO NOT use STL sort() function for this question.

Examples:

Input: arr[] = [6, 5, 3, 2, 8, 10, 9], k = 3
Output: [2, 3, 5, 6, 8, 9, 10]
Explanation: The sorted array will be 2 3 5 6 8 9 10


Input: arr[]= [1, 4, 5, 2, 3, 6, 7, 8, 9, 10], k = 2
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Explanation: The sorted array will be 1 2 3 4 5 6 7 8 9 10


Expected Time Complexity: O(nlogk)
Expected Auxilliary Space: O(n)

Constraints:
1 ≤ arr.size() ≤ 106
1 ≤ k < arr.size()
1 ≤ arri ≤ 106


Solution 1: 

public void nearlySorted(int[] arr, int k) {
        
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        int idx=0;
        
        for(int ele: arr)
        {
            pq.add(ele);
            if(pq.size()>k)
            {
                arr[idx]=pq.remove();
                idx++;
            }
        }
        for(int i=1; i <=k ;i++)
        {
            arr[idx]=pq.remove();
            idx++;
            
        }
    }