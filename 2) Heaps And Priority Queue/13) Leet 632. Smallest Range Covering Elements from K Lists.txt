You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

 

Example 1:

Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].


Example 2:

Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]
 

Constraints:

nums.length == k
1 <= k <= 3500
1 <= nums[i].length <= 50
-105 <= nums[i][j] <= 105
nums[i] is sorted in non-decreasing order.


Solution 1 : using minheap 

    class Triplet implements Comparable<Triplet>
    {
        int element;
        int row;
        int column;
        public Triplet(int ele,int i, int j )
        {
            element=ele;
            row=i;
            column=j;
        }
        public int compareTo(Triplet t)
        {
            return this.element-t.element;
        } 
    }
    public int[] smallestRange(List<List<Integer>> nums) {
        PriorityQueue<Triplet> pq=new PriorityQueue<>();  // minheap

        int max=Integer.MIN_VALUE;
        int[] minRange={0, Integer.MAX_VALUE};

        int k=nums.size();
        for(int i=0 ; i <k ; i++)
        {
            int ele=nums.get(i).get(0);
            pq.add(new Triplet(ele, i,0));
            max=Math.max(ele,max);
        }
        while(true)   // khabar nathi kya sudhi chalse 
        {
            Triplet t=pq.remove();
            int ele=t.element;
            int i=t.row;
            int j=t.column;
            
            int currDifference=max-ele;
            int minDifference= minRange[1] - minRange[0];

            // if(currDifference == minDifference )
            // {
            //     if(ele < minRange[0] )
            //     {
            //         minRange[0]=ele;
            //         minRange[1]=max;
            //     }
            // }
            // else if(currDifference < minDifference)
            // {
            //     minRange[0]=ele;
            //     minRange[1]=max;
            // }
            // else{ }
             if(currDifference < minDifference)
            {
                minRange[0]=ele;
                minRange[1]=max;
            }

            if( j==nums.get(i).size()-1)   break;// means last pe already hai to khatam kar do 
            
            int next= nums.get(i).get(j+1);// important 
            max=Math.max(next,max);
            pq.add(new Triplet(next,i,j+1));
    
        }
        return minRange;
    }


extra space : O(k)

// saaare element ek baar jaa rahe hai aur ek baar nikal rahe hia wrost case me 
// if there are total "n"elements in the entire nums then 
time : O(nlogk)   