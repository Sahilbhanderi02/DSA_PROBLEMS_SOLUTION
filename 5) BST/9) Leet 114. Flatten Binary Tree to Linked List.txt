Given the root of a binary tree, flatten the tree into a "linked list":

The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.
The "linked list" should be in the same order as a pre-order traversal of the binary tree.
 

Example 1:


Input: root = [1,2,5,3,4,null,6]
Output: [1,null,2,null,3,null,4,null,5,null,6]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [0]
Output: [0]
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100



Solution 1 : Easy Think


void preorder(TreeNode root, List<TreeNode>arr)
    {
        if(root==null) return ;
        arr.add(root);
        preorder(root.left,arr);
        preorder(root.right,arr);
    }


    public void flatten(TreeNode root) {

        List<TreeNode> arr= new ArrayList<>();
        preorder(root,arr);
        int n = arr.size();
        for(int i=0 ; i < n ; i++)
        {

            if(i!=n-1)arr.get(i).right=arr.get(i+1);
            arr.get(i).left=null;
        }



Solution 2: using Believe in recursion


public void flatten(TreeNode root) {

        if(root==null) return ;

        TreeNode lst=root.left;
        TreeNode rst=root.right;

        flatten(root.left);
        flatten(root.right);
        root.left=null;
        root.right=lst;

        TreeNode temp=root;
        while(temp.right!=null)
        {
            temp=temp.right;
        }
        temp.right=rst;

    }


Solution 3 :

public void flatten(TreeNode root)
{

        Stack<TreeNode> st=new Stack<>();
        if(root==null) return;

        st.push(root);

        while(!st.isEmpty())
        {
            TreeNode curr=st.pop();

            if(curr.right!=null) st.push(curr.right);
            if(curr.left!=null) st.push(curr.left);

            if(!st.isEmpty()) {
                curr.right=st.peek();
            }
            curr.left=null;
        }

    }


Solution 4 : Best OPTIMAL SC:O(1)


public void flatten(TreeNode root) {

        TreeNode curr=root;

        while(curr!=null)
        {
            if(curr.left!=null)
            {
                TreeNode rs=curr.right;
                curr.right=curr.left;
                TreeNode pred=curr.left;
                while(pred.right!=null)
                {
                    pred=pred.right;
                }
                pred.right=rs;
                curr.left=null;
                curr=curr.right;
            }
            else 
            {
                // no print no work 
                curr=curr.right;
            }
        }

    }