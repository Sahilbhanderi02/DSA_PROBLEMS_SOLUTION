Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].


Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There are no odd numbers in the array.


Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16
 

Constraints:

1 <= nums.length <= 50000
1 <= nums[i] <= 10^5
1 <= k <= nums.length


Solution 1 : Brute TIME LIMIT EXCEEDED

 public int numberOfSubarrays(int[] nums, int k) {
        
        int n =nums.length,countSub=0;

        for(int i=0 ; i<n;i++)
        {
            int oddCount=0;
            for(int j=i ; j<n ;j++)
            {
                if(nums[j]%2!=0)oddCount++;
                if(oddCount==k) countSub++;
            }
        }
        return countSub;
    }

TC : O(n2)
SC : O(1)


Solution 2 : Sliding winodw pure 

public int numberOfSubarrays(int[] nums, int k) {
        
        int n =nums.length,Subcount=0;

	int i=0, j=0,a=0,b=0,k2=0;

        //move a to first 1 
        while(i<n && nums[i]%2==0 ) i++;
        while(j<n && k2<k)
        {
            if(nums[j++] %2 !=0) k2++;
        }
        if(k2<k) return 0;
        j--;

        b=j+1;
        while(b<n && nums[b]%2==0) b++;
        b--;


        while(b<n)
        {
            Subcount+= (i-a+1) *(b-j+1);   //


            a=i+1;


            i++; while(i<n && nums[i]%2==0 ) i++;

            j=b+1;


            b=j+1;
            while(b<n && nums[b]%2==0) b++;
            b--;
        } 
    return Subcount;
    }

TC : O(n)
SC : O(1)

Solution 3 : prefixSum,hashmap

public int numberOfSubarrays(int[] nums, int k) {
        
        int l=0,r=0, n =nums.length,Subcount=0;

	for(int i=0 ; i<n ;i++)
        {
            nums[i]%=2;
        }
        for(int i=1; i<n ;i++) nums[i]+= nums[i-1];

        Map<Integer,Integer> map=new HashMap<>();
        for(int i=0 ; i< n ; i++)
        {
            if(!map.containsKey(nums[i]))map.put(nums[i],i);
            if(nums[i]==k)
            {
                int a =0;
                if(map.containsKey(nums[i]-k))a=map.get(nums[i]-k);
                int b=0;
                if(map.containsKey(nums[i]-k+1))b=map.get(nums[i]-k+1);
                Subcount+= (b-a+1);

            }
            if(nums[i]>k)
            {
               int a =0;
                if(map.containsKey(nums[i]-k))a=map.get(nums[i]-k);
                int b=0;
                if(map.containsKey(nums[i]-k+1))b=map.get(nums[i]-k+1);
                Subcount+= (b-a);
            }
        }
        return Subcount;
    }

TC : O(n)
SC : O(n)