The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.


Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.


Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 

Constraints:

0 <= n <= 30


Solution 1 :

public int fib(int n) {
        if(n<=1) return n;
        return fib(n-1)+fib(n-2);
    }

TC : O(2 power n)
SC :O(n)


Solution  2: using dp memoization : top to down

static int[] dp;
    public int fibo(int n )
    {
        if(n<=1) return n ;
        if(dp[n]!=0) return dp[n]; // zero nahi hai means answer already calculayted kiya hai
        int ans =fibo(n-1)+fibo(n-2);
        dp[n]=ans;   //return karne se pehle store karna padta 
        return ans;
    }
    public int fib(int n) {
        dp =new int [n+1];
        return fibo(n);
    }


//trick you already know to avoid global , pass it in arguments 

public int fibo(int n,int[] dp )
    {
        if(n<=1) return n ;
        if(dp[n]!=0) return dp[n]; // zero nahi hai means answer already calculayted kiya hai
        int ans =fibo(n-1,dp)+fibo(n-2,dp);
        dp[n]=ans;   //return karne se pehle store karna padta 
        return ans;
    }
    public int fib(int n) {
        int[] dp =new int [n+1];
        return fibo(n,dp);
    }

TC : O(n)
SC : O(n)


Solution 3 : DP using tabulation 


public int fib(int n) {
        if(n<=1) return n;
        int[] dp =new int [n+1];
        dp[0]=0;dp[1]=1;
        for(int i=2 ;i<=n;i++)
        {
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }

TC : O(n)
SC : O(n)


SOlution 4 : dp using tabulation and space optimization 

public int fib(int n) {
        if(n<=1) return n;
        int a=0,b=1,c=0;
        for(int i=2 ;i<=n;i++)
        {
            c=a+b;
            a=b;
            b=c;
        }
        return c;
    }

TC : O(n)
SC : O(1)
