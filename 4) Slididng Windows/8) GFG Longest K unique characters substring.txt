Given a string s, you need to print the size of the longest possible substring with exactly k unique characters. If no possible substring exists, print -1.

Examples:

Input:
s = "aabacbebebe", k = 3
Output: 7
Explanation: 
"cbebebe" is the longest substring with 3 distinct characters.


Input: 
s = "aaaa", k = 2
Output: -1
Explanation: 
There's no substring with 2 distinct characters.


Input:
s = "aabaaab", k = 2
Output: 7
Explanation: 
"aabaaab" is the longest substring with 2 distinct characters.


Constraints:
1 ≤ |s| ≤ 105
1 ≤ k ≤ 26
All characters are lowercase Latin characters.


Solution 1 : not working 

HashMap<Character,Integer> map=new HashMap<>();
        int l=0,r=0,n=s.size() , maxLen=-1;

        while(r<n)
        {
            char c = s.charAt(r);
            if(map.containsKey(c)
            {

            }
            else // naya fruit aya hai
            {
                if(map.size()<k)  // abhi basket khali ya 1 hi fruit hai to naya fruit aa payega 
                {
                    map.put(c,1);
                }
                else  // basket me already purane type ke fruits pade hai  
                {
                    char comp=s.charAt(r-1) ;//fruits[r-1];
                    int t=r-1;
                    while(s.charAt(t)==comp) t--;
                    map.remove(s.charAt(t));
                    map.put(c,1);
                    l=t+1;
                }
            }
            int size=r-l+1;
            if(size>maxLen)maxLen=size;
            r++;
        }
        return maxLen;


Solution 2 :

public int longestkSubstr(String s, int k) {
        
          HashMap<Character,Integer> map=new HashMap<>();
        int l=0,r=0,n=s.length(), maxLen=-1;
        
        while(r<n)
        {
            char c = s.charAt(r);
            if(map.containsKey(c) ) map.put(c , map.get(c )+1);
            else map.put(c ,1);

            while(map.size()>k)
            {
                char ch=s.charAt(l);
                int freq=map.get(ch);
                // map.put(fruits[l],freq-1);
                // if(map.get(fruits[l])==0) map.remove(fruits[l]);
                //OR
                if(freq==1) map.remove(ch);
                else map.put(ch,freq-1);
                l++;
            }
            if(map.size()<=k) maxLen=Math.max(maxLen,r-l+1);
            r++;
        }
        return maxLen;
    }

TC : O(n)
SC : O(1)