
SOlution 1 : brute  PROBLEM TIME LIMIT EXCEEDED

class MedianFinder {
    List<Integer>arr;
    public MedianFinder() {
        arr=new ArrayList<>();
    }
    
    public void addNum(int num) {
        arr.add(num);
    }
    
    public double findMedian() {
        int size=arr.size();
        Collections.sort(arr);
        
        if(size%2==0)// even elements
        {
            int rightMid=size/2;
            int leftMid=rightMid-1;
            double d1=arr.get(rightMid);
            double d2=arr.get(leftMid);
            return (d1+d2)/2;
        }
        else //odd elements 
        {
            int mid=size/2;
            return arr.get(mid);
        }
    }
}


SOLUTION 2 : INSERTION SORT

class MedianFinder {
    List<Integer>arr;
    public MedianFinder() {
        arr=new ArrayList<>();
    }
    
    public void addNum(int num) {
        arr.add(num);
        int i=arr.size()-1;
        while(i>0)
        {
            if(arr.get(i)<arr.get(i-1))
            {
                swap(i,i-1);
                i--;
            }
            else break;
        }
    }
    public void swap(int i ,int j )
    {
        int temp=arr.get(i);
        arr.set(i,arr.get(j));
        arr.set(j,temp);
    }
    
    public double findMedian() {
        int size=arr.size();
        
        if(size%2==0)// even elements
        {
            int rightMid=size/2;
            int leftMid=rightMid-1;
            double d1=arr.get(rightMid);
            double d2=arr.get(leftMid);
            return (d1+d2)/2;
        }
        else //odd elements 
        {
            int mid=size/2;
            return arr.get(mid);
        }
    }
}

TC :O(N2)
SC :O(N)


Solution 3 : AA Question j heap mate banelo che 


class MedianFinder {
    PriorityQueue<Integer>maxheap=new PriorityQueue<>(Collections.reverseOrder());
    PriorityQueue<Integer>minheap=new PriorityQueue<>();

    public MedianFinder() {
    }
    
    public void addNum(int num) {
        if(maxheap.size()==0) maxheap.add(num);
        else 
        {
            if(num<maxheap.peek()) maxheap.add(num);
            else minheap.add(num);
        }

        //balance the heap size no diffenrence 1 karta vadhu nai karvano
        if(maxheap.size()==minheap.size()+2)// 2 no difference avbi gayo
        {
            int ele=maxheap.remove();
            minheap.add(ele);
        }
        if(maxheap.size()+2==minheap.size())
        {
            int ele=minheap.remove();
            maxheap.add(ele);
        }
    }
   
    
    public double findMedian() {
        if(maxheap.size()==minheap.size()) return (maxheap.peek()+minheap.peek())/2.0;
        else if(maxheap.size()>minheap.size()) return maxheap.peek();
        else return minheap.peek();
    }
}

TC :O(nlogn)
SC :O(n)