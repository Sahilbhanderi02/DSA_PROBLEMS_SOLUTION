Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

 

Example 1:

Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]


Example 2:

Input: preorder = [1,3]
Output: [1,null,3]
 

Constraints:

1 <= preorder.length <= 100
1 <= preorder[i] <= 1000
All the values of preorder are unique.


Solution 1 : easy think but more time 


public TreeNode helper(int[] preorder, int []inorder ,int prelo,int prehi,int inlo,int inhi)
    {
        if(prelo>prehi || inlo>inhi) return null;
       // TreeNode root=new TreeNode(preoder[0]); // noo badhalro jase too wrond
        TreeNode root=new TreeNode(preorder[prelo]);

        int r=0;
        while(inorder[r]!=preorder[prelo])
        {
            r++;
        }
        int leftsize=r-inlo;

        root.left=helper(preorder, inorder, prelo+1, prelo+leftsize, inlo,r-1 );
        root.right=helper(preorder, inorder, prelo+leftsize+1, prehi, r+1 , inhi);
        return root;
    }

    public TreeNode bstFromPreorder(int[] preorder) {
         int n =preorder.length;
        int [] inorder = Arrays.copyOf(preorder,n);

        Arrays.sort(inorder) ; 
        return helper(preorder , inorder, 0, n-1, 0, n-1);
    }


Solution 2 :

public TreeNode bstFromPreorder(int[] preorder) {

        return bstFromPreorder(preorder, Integer.MAX_VALUE,  new int []{0});
    }

    public TreeNode bstFromPreorder(int[] preorder, int bound , int[] idx)
    {
        if(idx[0]== preorder.length || preorder[idx[0]]>bound) return null;
        TreeNode root=new TreeNode(preorder[idx[0]++]);
        root.left=bstFromPreorder(preorder, root.val, idx);
        root.right=bstFromPreorder(preorder,bound , idx);
        return root;
    }

SAME SOLUTION BUT WITH GLOBAL

int idx=0;
    
    public TreeNode bstFromPreorder(int[] preorder) { 

        return bstFromPreorder(preorder, Integer.MAX_VALUE);
    }
    public TreeNode bstFromPreorder(int[] preorder, int bound)
    {
        if(idx == preorder.length || preorder[idx] > bound) return null;
        TreeNode root=new TreeNode(preorder[idx++]);
        root.left=bstFromPreorder(preorder, root.val);
        root.right=bstFromPreorder(preorder,bound);
        return root;
    }
