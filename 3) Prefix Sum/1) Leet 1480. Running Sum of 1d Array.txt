Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).

Return the running sum of nums.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].


Example 2:

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].


Example 3:

Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]
 

Constraints:

1 <= nums.length <= 1000
-10^6 <= nums[i] <= 10^6


SOlution 1 : Brute Force 

public int[] runningSum(int[] nums) {

        //brute force 
        int ans []=new int [nums.length];
        for(int i =0 ; i< nums.length; i++)
        {
            int sum=0;
            for(int j=0 ; j<=i ; j++)
            {
                sum+=nums[j];
            }
            ans[i]=sum;
        }
        return ans ;
}

TC : O(n2)
SC : O(1)


Solution 2 : Prefix Sum 

public int[] runningSum(int[] nums) {

	
        //prefix sum
        int ans []=new int [nums.length];
        
        ans[0]=nums[0];
        for(int i =1 ; i <nums.length; i++)
        {
            ans[i]=ans[i-1]+nums[i];
        }
        return ans ;
    }

TC : O(n)
SC :O(n)   you can also modified the given array then the extra auxiliary space will be O(1)

