Given an array of integers arr[]  and a number k. Return the maximum sum of a subarray of size k.

Note: A subarray is a contiguous part of any given array.

Examples:

Input: arr[] = [100, 200, 300, 400] , k = 2
Output: 700
Explanation: arr3  + arr4 =700, which is maximum.


Input: arr[] = [100, 200, 300, 400] , k = 4
Output: 1000
Explanation: arr1 + arr2 + arr3 + arr4 =1000, which is maximum.


Input: arr[] = [100, 200, 300, 400] , k = 1
Output: 400
Explanation: arr4 =400, which is maximum.

Constraints:
1 <= arr.size() <= 106
1 <= arr[i]<= 106
1 <= k<= arr.size()


Solution 1 : Brute Force


    public long maximumSumSubarray(int[] arr, int k) {
        
        int maxSum=Integer.MIN_VALUE;
        for(int i=0;i<arr.length-k+1 ; i++)
        {
            int sum=0;
            for(int j=i ; j<i+k  ; j++)
            {
                sum+=arr[j];
            }
            maxSum=Math.max(sum,maxSum);
        }
        return maxSum;
    }

TC :O(n*k)
SC :O(1)


Solution 2 : Sliding Window 


    public long maximumSumSubarray(int[] arr, int k) {
        
        int maxSum=Integer.MIN_VALUE;
        int sum=0;
        
        for(int i=0 ; i <=k-1 ;i++)  //k times 
        {
            sum+=arr[i];
        }
        maxSum=sum;
        
        int i=1, j=k;
        
        while(j<=arr.length-1) // or j<n
        {
            sum=sum-arr[i-1]+arr[j];
            maxSum=Math.max(maxSum,sum);
            i++;j++;
        }
        
        return maxSum;
    }


TC :O(n+k)=O(n)
SC :O(1)