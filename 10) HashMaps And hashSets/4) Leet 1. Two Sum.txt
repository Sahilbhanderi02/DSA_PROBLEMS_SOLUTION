Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].


Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]


Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.



Solution 1 : Brute Force

 public int[] twoSum(int[] arr, int target) {
        int n=arr.length;

        int []ans=new int [2];
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(arr[i]+arr[j]==target)
            {
             ans[0]=i;
             ans[1]=j;
             break;
            }
        }
    }
        return ans;
    }


Solution 2: 


    public int[] twoSum(int[] arr, int target) {
        int n=arr.length;

        int []ans=new int [2];

    // M2

    HashMap<Integer, Integer> map=new HashMap<>();
    // pair < index, value >  WORNG AGAL NADSE
    // pair < value , index >


    for(int i=0 ; i < n; i++)
    {

        // if(map.containsValue(arr[i]))
        // {
        //     map.get();
        //     // jovo aya j locha pade che 
        //     // if key ni andar me sachu ma index nakhya hase to 
        //     // me je second number find karyo tyare mane .get(key)  thi e je index par value hase e malshe but mare to index joto che juno Therfroe undhu karo !!!!!

        //     ans[0]=;
        //     ans[1]=i;
        //     break;
        // }
        // else
        // {
        //     map.put( i , target-arr[i] );
        // }


        int rem=target-arr[i];
        if(map.containsKey(rem))
        {
            int j= map.get(rem);   // woh jisse remaining pura hot haiuska index leke aao
            ans[0]=i;
            ans[1]=j;
            break;

        }
        else {
        map.put(arr[i], i);
        }
    }
        return ans;
    }