Given an array of integers arr of even length n and an integer k.

We want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.

Return true If you can find a way to do that or false otherwise.

 

Example 1:

Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5
Output: true
Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).

Example 2:

Input: arr = [1,2,3,4,5,6], k = 7
Output: true
Explanation: Pairs are (1,6),(2,5) and(3,4).

Example 3:

Input: arr = [1,2,3,4,5,6], k = 10
Output: false
Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.
 

Constraints:

arr.length == n
1 <= n <= 105
n is even.
-109 <= arr[i] <= 109
1 <= k <= 105


SOlution 1:

    public boolean canArrange(int[] arr, int k) {
        boolean flag=true;

        HashMap<Integer,Integer> map=new HashMap<>();

        for(int i=0 ; i <arr.length ;i++)
        {
            int ele=arr[i]%k;
            if(ele<0) ele+=k;
            // equivalet ine of above two int ele=((arr[i]%k)+k)%k;
            if(map.containsKey(ele))
            {
                int freq=map.get(ele);
                map.put(ele, freq+1);
            }
            else{
                map.put(ele,1);
            }
        }
        if(map.containsKey(0))
        {
            if(map.get(0)%2!=0)return false;
            map.remove(0);
        }
        // aa niche no cASE TO NAI AVE BECACUSE ARRAY NI LENGTH ALWAYS EVEN CHE 
        // if(k%2==0 && map.containsKey(k/2))
        // {
        //     if(map.get(k/2)%2!=0)return false;
        //     map.remove(k/2);
        // }

        for(int key : map.keySet())
        {
            int rem=k-key;
            if(map.containsKey(rem)==false) return false;
            int keyFreq=map.get(key);
            int remFreq=map.get(rem);
            if(keyFreq!=remFreq) return false;
        }
        return true;
    }