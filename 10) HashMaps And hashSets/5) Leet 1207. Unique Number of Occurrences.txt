Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.

 

Example 1:

Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.


Example 2:

Input: arr = [1,2]
Output: false


Example 3:

Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true
 

Constraints:

1 <= arr.length <= 1000
-1000 <= arr[i] <= 1000




Solution 1 :

public boolean uniqueOccurrences(int[] arr) {
        
        HashMap<Integer,Integer> map=new HashMap<>();
        // pair < value , freq >  // answer nai malto 
        // pair <freq , value>   // absouluteblunder

        for(int i=0 ; i < arr.length; i++)
        {
            if(map.containsKey(arr[i]))
            {
                int count=map.get(arr[i]);
                map.put(arr[i], count+1);
            }
            else{
                map.put(arr[i],1);
            }
        }

        HashSet<Integer> set=new HashSet<>();

        // for(int i= 0 ; i < map.size(); i++)  // ama bhai i to array ni che 
        // // blunder have assume  arr ma starting na j element same nikalya to 
        // // ex arr={1,1,1,} to dar vakhte a ni freq avshe etle false j avshe 
        // {
            // if(set.contains(map.get(arr[i]))) return false;
            // else set.add(map.get(arr[i]));
        // }
        // return true;


        for(int key : map.keySet())
        {
                if(set.contains(map.get(key))) return false;
            else set.add(map.get(key));
        }
// use above or below only one for loop  alternative rit cche 
	//for(int value : map.values())
        //{
        //        if(set.contains(value)) return false;
        //        else set.add(value);
        //}
return true;
    }


Solution 2 :

public boolean uniqueOccurrences(int[] arr) {

        HashMap<Integer, Integer> elementCount = new HashMap<Integer, Integer>();

        for (int i : arr) {
            if (elementCount.containsKey(i)) {
                elementCount.put(i, elementCount.get(i) + 1);
            } else {
                elementCount.put(i, 1);
            }
        }
        
    Set<Integer> elementCountSet = new HashSet<>(elementCount.values());
    return elementCountSet.size() == elementCount.size();
    }

