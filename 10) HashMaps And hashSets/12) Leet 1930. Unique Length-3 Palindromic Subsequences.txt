Given a string s, return the number of unique palindromes of length three that are a subsequence of s.

Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once.

A palindrome is a string that reads the same forwards and backwards.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
 

Example 1:

Input: s = "aabca"
Output: 3
Explanation: The 3 palindromic subsequences of length 3 are:
- "aba" (subsequence of "aabca")
- "aaa" (subsequence of "aabca")
- "aca" (subsequence of "aabca")


Example 2:

Input: s = "adc"
Output: 0
Explanation: There are no palindromic subsequences of length 3 in "adc".


Example 3:

Input: s = "bbcbaba"
Output: 4
Explanation: The 4 palindromic subsequences of length 3 are:
- "bbb" (subsequence of "bbcbaba")
- "bcb" (subsequence of "bbcbaba")
- "bab" (subsequence of "bbcbaba")
- "aba" (subsequence of "bbcbaba")
 

Constraints:

3 <= s.length <= 105
s consists of only lowercase English letters.


SOlution 1:

 public int countPalindromicSubsequence(String s) {
        HashMap<Character,Integer> firstMap=new HashMap<>();
        HashMap<Character,Integer> lastMap=new HashMap<>();

        for(int i=0 ; i <s.length();i++)
        {
            char ch=s.charAt(i);   // simple s[i] in c
            if(!firstMap.containsKey(ch)) firstMap.put(ch,i);
            lastMap.put(ch,i);  //overrite thato resre ane no hoy to mukato pan rese
        }
        int count=0;
        for(char ch : firstMap.keySet())
        {
            int firstIdx=firstMap.get(ch);
            int lastIdx=lastMap.get(ch);

            HashSet<Character> set=new HashSet<>();
            for(int i=firstIdx+1 ; i<=lastIdx-1 ; i++)
            {
                set.add(s.charAt(i));
            }
            count+=set.size();
        }
        return count;
    }