Given a binary tree. The task is to check whether the given tree follows the max heap property or not.
Note: Properties of a tree to be a max heap - Completeness and Value of node greater than or equal to its child.

Example 1:

Input:
      5
    /  \
   2    3
Output: 1
Explanation: The given tree follows max-heap property since 5,
is root and it is greater than both its children.

Example 2:

Input:
       10
     /   \
    20   30 
  /   \
 40   60
Output: 0

Your Task:
You don't need to read input or print anything. Your task is to complete the function isHeap() which takes the root of Binary Tree as parameter returns True if the given binary tree is a heap else returns False.

Expected Time Complexity: O(N)
Expected Space Complexity: O(N)

Constraints:
1 ≤ Number of nodes ≤ 100
1 ≤ Data of a node ≤ 1000


Soluition 1 : DFS


int getsize(Node root)
    {
        if(root==null)return 0;
        return 1+getsize(root.left)+getsize(root.right);
    }
    boolean isCBT(Node root,int idx, int size)
    {
        if(root==null) return true;
        if(idx>=size) return false;
        return isCBT(root.left,2*idx+1,size)&&isCBT(root.right,2*idx+2,size);
        
    }
    boolean isHOP(Node root)
    {
        if(root==null) return true;
        if(root.left!=null && root.left.data>=root.data) return false;
        if(root.right!=null && root.right.data>=root.data) return false;
        
        return isHeap(root.left)&&isHeap(root.right);
    }
    int size=0;
    boolean isHeap(Node root) {
        
        size=getsize(root);
        return isCBT(root,0,size) && isHOP(root);
    }

TC :O(n+n+n)=O(n)
SC :O(h)=O(h)


SOLution 2: DFS


boolean isHeap(Node root) {
        if(root==null) return true;
        
        boolean checkForNULL=false;
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty())
        {
            Node curr=q.remove();
            
            if(curr==null) checkForNULL=true;
            else 
            {
                if(checkForNULL) return false;
                if(curr.left != null && curr.data<curr.left.data)return false;
                if(curr.right != null && curr.data<curr.right.data)return false;
                q.add(curr.left);
                q.add(curr.right);
            }
        }
        return true;
        
    }

TC :O(n)
Auxiliary Space: O(W), where W is the maximum width (number of nodes at any level) of the binary tree.