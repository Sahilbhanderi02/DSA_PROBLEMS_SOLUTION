Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

 

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.


Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length



Solution 1 : Brute 

	int maxLen=0;
        int n =nums.length;

        for(int i=0 ; i < n;i++)
        {
            int zeroes=0;
            for(int j =i ; j <n ;j++)
            {
                if(nums[j]==0)zeroes++;
                if(zeroes<=k)
                {
                    int len=j-i+1;
                    maxLen=Math.max(maxLen,len);
                }
                else break;
            }
        }
        return maxLen;

TC :O(n)
SC :O(1)

SOlution 2 : sliding window 

public int longestOnes(int[] nums, int k) {

        int maxLen=0;
        int n =nums.length;
        int l=0,r=0,zeroes=0;

        while(r<n)
        {
            if(nums[r]==0) zeroes++;
            while(zeroes>k)
            {
                if(nums[l]==0) zeroes--;
                l++;
            }
            if(zeroes<=k)
            {
                int len=r-l+1;
                maxLen=Math.max(maxLen,len);
            }
            r++;
        }
        return maxLen;
    }

TC :O(2n)
SC :O(1)


Solution 3 : best

    public int longestOnes(int[] nums, int k) {

        int maxLen=0;
        int n =nums.length;
        int l=0,r=0,zeroes=0;

        while(r<n)
        {
            if(nums[r]==0) zeroes++;
            if(zeroes>k)
            {
                if(nums[l]==0) zeroes--;
                l++;
            }
            if(zeroes<=k)
            {
                int len=r-l+1;
                maxLen=Math.max(maxLen,len);
            }
            r++;
        }
        return maxLen;
    }

TC :O(n)
SC :O(1)



// YOur incomplete approach 

    public int longestOnes(int[] nums, int k) {

        int maxSize=0;
        boolean zeroPresent=false;
        int i=0,j=1 ;
        int zeroIdx=-1;
        int originalK=k;

        if(nums.length==1) 
        {
            if(nums[0]==0)
            {
                if(k==0)
                {
                    return 0;
                }
                else return 1 ;
            }  
            else return 1;
        }

        if( nums[i]==0 ) 
        {
            zeroPresent=true;
            zeroIdx=0;
            k--;
        }

        //[0,0,1,1,1,0,0]  k =0
        // aa case mate pachu karvu padse ke k==0 hoy to winodw ni andar j zero ne lava j no devano 

        while( j <= nums.length-1 )
        {
            int size=0;
            if( nums[j]== 0)
            {
                if(zeroPresent && k==0 )  //[0,0,1,1,1,0,0]  k =0 aa case thi k==0 no kam kare output 7 avi jay
                {
                    i=zeroIdx+1;
                    // zeroIdx=j;
                    // for(int z=i; nums[z]==1;k++);
                    int z=i;
                    while(nums[z]!=0) z++;
                    zeroIdx=z;
                }
                else  // pehle se xero nahi tha , to k times me chala sakta hu zero ko window me ane dena because utni time flip chalti hai 
                {
                    zeroPresent=true;
                    if(originalK==k) zeroIdx=j;
                    k--;
                }
            }
           
            size=j-i+1;
            if(size>maxSize) maxSize=size;    
            j++;
        }
        return maxSize;
    }