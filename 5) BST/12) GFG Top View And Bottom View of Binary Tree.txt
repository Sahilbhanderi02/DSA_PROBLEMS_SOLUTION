Given below is a binary tree. The task is to print the top view of binary tree.
Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /  \
4    5   6    7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node.
Also if 2 nodes are outside the shadow of the tree and are at same position then consider the left ones only(i.e. leftmost). 
For ex - 1 2 3 N 4 5 N 6 N 7 N 8 N 9 N N N N N will give 8 2 1 3 as answer. Here 8 and 9 are on the same position but 9 will get shadowed.

Example 1:

Input:
      1
   /    \
  2      3
Output: 2 1 3
Example 2:

Input:
       10
    /      \
  20        30
 /   \    /    \
40   60  90    100
Output: 40 20 10 30 100

Expected Time Complexity: O(NlogN)
Expected Auxiliary Space: O(N).

Constraints:
1 ≤ N ≤ 105
1 ≤ Node Data ≤ 105



SOlution 1: 


class Pair{
    Node node;
    int vertical;
    public Pair(Node n , int v)
    {
        node=n;
        vertical=v;
    }
}
class Solution {


    static ArrayList<Integer> topView(Node root) {
       

        ArrayList<Integer> ans= new ArrayList<>();

        if(root==null) return ans;
        
        Map<Integer,Integer> map=new TreeMap<>();
        Queue<Pair> q=new LinkedList<>();
        
        q.add(new Pair(root, 0));
        
        while(!q.isEmpty())
        {
           Pair pair=q.remove();
           Node node=pair.node;
           int line=pair.vertical;
           
           if(!map.containsKey(line))             // just remove this line and see it becomes bottom view 
           {
               map.put(line,node.data);
           }
           
           if(node.left!=null)
           {
               q.add(new Pair(node.left, line - 1));
           }
           if (node.right != null)
           {
               q.add(new Pair(node.right, line + 1));
           }
        }
        
        for (int value : map.values()) {
            ans.add(value);
        }
        
        return ans;
    }
}