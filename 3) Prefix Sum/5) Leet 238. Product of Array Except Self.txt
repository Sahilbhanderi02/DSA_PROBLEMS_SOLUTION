Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]


Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)


Solution 1 : brute (TIME LIMIT EXCEEDED)

public int[] productExceptSelf(int[] nums) {
        
        int[]ans=new int[nums.length];
        for(int i=0 ; i<nums.length;i++)
        {
            int mul=1 ;
            for(int j =0 ;j<nums.length; j++)
            {
                if(j==i)continue;
                mul=mul*nums[j];
            }
            ans[i]=mul;
        }
        return ans;
    }

TC :O(n2)
SC :O(1)


Soltion 2 : 2nd brute (TIME LIMT EXCEEDED)

    public int divide(int dividend, int divisor) {
        //no need of this as zero to kyarai avshe j nai
        //  if (divisor == 0) {
        //     throw new ArithmeticException("Cannot divide by zero");
        // }
        int quotient = 0;
        int sign = (dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0) ? -1 : 1;
        
        // Make both numbers positive
        dividend = Math.abs(dividend);
        divisor = Math.abs(divisor);

        while (dividend >= divisor) {
            dividend -= divisor;
            quotient++;
        }

        return quotient * sign;
    }
    public int[] productExceptSelf(int[] nums) {
        
        int[]ans=new int[nums.length];

        int mul=1 ;
        int zeroIdx=-1;
        int noOfZeroes=0;
        for(int i=0 ; i<nums.length;i++)
        {
            if(nums[i]==0)
            {
                zeroIdx=i;
                noOfZeroes++;
                continue;
            }
            mul=mul*nums[i];
        }
        if(zeroIdx!=-1) {
            // if(nums[zeroIdx]==0) return ans ; //problem [single zero]
            if(noOfZeroes>1)return ans;
            ans[zeroIdx]=mul;
            return ans ;
            }
        for(int i=0 ; i <nums.length;i++)
        {
            nums[i]=divide(mul,nums[i]);
        }
        return nums;
    }

TC : O(n)+while()
SC :O(1) if permission of modify


Solution 3 : PREFIX & SUFFIX CONCEPT

    public int[] productExceptSelf(int[] nums) {
        
        int[]pre=new int[nums.length];
        int[]suf=new int[nums.length];

        pre[0]=nums[0];
        suf[nums.length-1]=nums[nums.length-1];
        for(int i=1 ,j=nums.length-2; i<nums.length; i++,j--)
        {
            pre[i]=pre[i-1]*nums[i];
            suf[j]=suf[j+1]*nums[j];
        }
        nums[0]=suf[1];
        nums[nums.length-1]=pre[nums.length-2];
       for(int i=1 ; i <nums.length-1;i++)
        {
            nums[i]=pre[i-1]*suf[i+1];
        }
        return nums;
    }

TC :O(n)
SC :O(n)  //here one extra array will be needed any how 


 Solution 4 : WITH JUST ONE ARRAY 

    public int[] productExceptSelf(int[] nums) {
        
        int[]pre=new int[nums.length];
        pre[0]=1;

        for(int i=1 ; i<nums.length; i++)
        {
            pre[i]=pre[i-1]*nums[i-1];
        }
        int suf=1;
       for(int i=nums.length-2 ; i >=0 ;i--)
        {
            suf*=nums[i+1];
            pre[i]*=suf;
        }
        return pre;
    }

