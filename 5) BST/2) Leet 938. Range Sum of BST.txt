Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

 

Example 1:

Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32
Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.

Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23
Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.
 

Constraints:

The number of nodes in the tree is in the range [1, 2 * 104].
1 <= Node.val <= 105
1 <= low <= high <= 105
All Node.val are unique.


Solution 1 :  Brute Force (Do any traversal and if its value lie in range then add it in sum)

int sum=0;
    void inorder(TreeNode root ,  int lo, int hi)
    {
        if(root==null) return ;
        if(root.val>=lo && root.val<=hi) sum+=root.val;
        inorder(root.left,lo,hi);
        inorder(root.right,lo,hi);
    }
    public int rangeSumBST(TreeNode root, int low, int high) {
        inorder(root, low,high);
        return sum;
    }


Silution 2 : 

 int sum=0;

    public int rangeSumBST(TreeNode root, int low, int high) {
       
       if(root==null) return 0 ;
       if(root.val>=low && root.val <=high) 
       {
        sum+=root.val;
        rangeSumBST(root.right, low ,high);
         rangeSumBST(root.left, low ,high);

       }
       else if( root.val < low) rangeSumBST(root.right, low ,high);
       else rangeSumBST(root.left, low ,high);

       return sum;
    }


Solution 3 : (Best Time)

 public int rangeSumBST(TreeNode root, int low, int high) {
        
        return rec(root, low, high);

    }

    private int rec(TreeNode root, int low, int high){

        if(root == null){
            return 0;
        }

        int sum = 0;

        if(low<=root.val && high>=root.val){
            sum += root.val;
        }

        if(low < root.val){
            sum += rec(root.left, low, high);
        } 
        if(root.val < high){
            sum += rec(root.right, low, high);
        }


        	return sum;
	}