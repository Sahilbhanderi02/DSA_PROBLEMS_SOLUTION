

There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 
Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 









// your too much loong and wasted effort to find 0 ke evo element goto ke jeni agal ane pachal 0 eni karta mota hoy 

public int bs(int []arr, int lo, int hi ,int target )
    {
        while(lo<=hi)
        {
            int mid=lo+(hi-lo)/2;
            if(arr[mid]==target) return mid;
            else if(arr[mid]>target ) hi=mid-1;
            else lo=mid+1;
        }
        return -1;
    }

    public int search(int[] arr, int target)
    {
        int n=arr.length;
        if(n<=2)
        {
            for(int i=0;i<n;i++)
            {
                if(arr[i]==target)return i;
            }
            return -1;
        }
        int p=-1;    
        int lo=1,hi=n-2;
        while(lo<=hi)
        {
            int mid=lo+(hi-lo)/2;

            if(arr[mid]>arr[mid-1]  && arr[mid]>arr[mid+1]){  
                p=mid;
                break;
            }
            else if(arr[mid]<arr[mid-1]  && arr[mid]<arr[mid+1]){
                p=mid-1;
                break;
            }
            else if(arr[mid]>arr[mid-1]  && arr[mid]< arr[mid+1]){
                if(arr[mid]>arr[n-1])   lo=mid+1;
                else hi=mid-1;
            }
        }
        
            if(p==-1)
            return bs(arr,0,n-1,target);

            int leftpart=bs(arr,0,p,target);
            if(leftpart!=-1) return leftpart;

            int rightpart=bs(arr,p+1,n-1,target);
            return rightpart;
    }




------FINAL SOLUTION-------

    public int search(int[] arr, int target) {

        int ans =-1;
        int lo=0,hi=arr.length-1;
        while(lo<=hi)
        {
            int mid=(hi-lo)/2+lo;

            if(arr[mid]==target) {ans=mid; break;}  // if dont want to use break then direct return mid;  and niche return -1;

            if(arr[mid]>=arr[lo])  // means left part is sorted 
            {
                if(arr[lo]<=target && target<=arr[mid])   // left part ni andar target hovo joie then only eleeminate rigth part
                {
                    hi=mid-1;
                }
                else {
                    lo=mid+1;
                }
            }

            else // means right part is sorted
            {
                if(arr[mid]<=target && target<=arr[hi])
                {
                    lo=mid+1;
                }
                else{
                    hi=mid-1;
                }
            }
        }
        return ans ;

    }