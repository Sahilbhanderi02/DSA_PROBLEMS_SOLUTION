Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]


Solution 1 ) 
    public int[] searchRange(int[] arr, int target) {
        int lo=0,hi=arr.length-1;
        int flag=0;
        int []ans ={-1,-1};

        while(lo<=hi)
        {
            int mid=(hi-lo)/2+lo;
            if(arr[mid]==target) { flag =1;break; }  // eltu paku thay jay ke element present che 
            else if (arr[mid]>target)   hi=mid-1;
            else lo=mid+1;
        }
        if (flag==0) return ans ;
        
        // aa point e paku thay jay ke element present che array ma 
        // NOTE aa point e hi ane lo kyaya rakhadta hase atle ene pachu reset kari dejo

        lo=0;hi=arr.length-1;

        while(lo<=hi)
        {
            int mid=(hi-lo)/2+lo;
            if(arr[mid]>= target)
            {
                hi=mid-1;
            }
            else lo=mid+1;
        }
        ans[0]=lo;

        lo=0;hi=arr.length-1;

        while(lo<=hi)
        {
            int mid=(hi-lo)/2+lo;
            if(arr[mid]> target)
            {
                hi=mid-1;
            }
            else lo=mid+1;
        } 
        ans[1]=lo-1;

        return ans ;
    }


SOlution 2 ) 
//one while loop reduced using mind 
    public int[] searchRange(int[] arr, int target) {
        int lo=0,hi=arr.length-1;
        int flag=0;
        int []ans ={-1,-1};

        while(lo<=hi)
        {
            int mid=(hi-lo)/2+lo;
            if(arr[mid]>= target)
            {
                hi=mid-1;
            }
            else lo=mid+1;
        }
        if(lo==arr.length || arr[lo]!=target){ ans [0]=-1;ans [1]=-1; return ans ;}   // this reduces one while loop
        
        ans[0]=lo;

        lo=0;hi=arr.length-1;

        while(lo<=hi)
        {
            int mid=(hi-lo)/2+lo;
            if(arr[mid]> target)
            {
                hi=mid-1;
            }
            else lo=mid+1;
        } 
        ans[1]=lo-1;
        return ans ;