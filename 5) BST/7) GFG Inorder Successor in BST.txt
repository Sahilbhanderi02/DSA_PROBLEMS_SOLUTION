Given a BST, and a reference to a Node x in the BST. Find the Inorder Successor of the given node in the BST.
 

Example 1:

Input:
      2
    /   \
   1     3
K(data of x) = 2
Output: 3 
Explanation: 
Inorder traversal : 1 2 3 
Hence, inorder successor of 2 is 3.

Example 2:

Input:
             20
            /   \
           8     22
          / \
         4   12
            /  \
           10   14
K(data of x) = 8
Output: 10
Explanation:
Inorder traversal: 4 8 10 12 14 20 22
Hence, successor of 8 is 10.
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function inOrderSuccessor(). This function takes the root node and the reference node as argument and returns the node that is inOrder successor of the reference node. If there is no successor, return null value.


Expected Time Complexity: O(Height of the BST).
Expected Auxiliary Space: O(1).


Constraints:
1 <= N <= 105, where N is number of nodes


Solition 1 :  

Node prev=null;
    Node predecessor=null;
    Node successor=null;
    
    // returns the inorder successor of the Node x in BST (rooted at 'root')
	public Node inorderSuccessor(Node root,Node x)
	{
	    
	    //problem in this method is that after tane answer mali jay to pan tame continue traverse karta jav cho atle successor ni value update thati rese answer malya pachi pan
	    // therefore return immediately after answer if found 
	    // and return right answer upar jay em 
	   // inorderSuccessor(root.left,x);
	   // if(prev==x) successor=root;
	   // else prev=root;
	   
	   // inorderSuccessor(root.right,x);
	   // return successor;
	   
	  if(root==null) return null;
	  Node left = inorderSuccessor(root.left, x);
      if (left != null) return left;  // Stop recursion if successor is already found

      // If the previous node (prev) was the target node (x), the current node (root) is the successor
      if (prev == x) {
         successor = root;
         return successor;  // Return as soon as successor is found
       }

    // Update prev to the current node
    prev = root;

    // Recursively search in the right subtree
    return inorderSuccessor(root.right, x);
	    
    }




Solution 2 : OPTIMAL SPACE O(1)  

public Node inorderSuccessor(Node root,Node x)
    {
            Node successor=null;
            while(root!=null)
            {
                if(x.data>=root.data) root=root.right;
                
            else {
                successor=root;
                root=root.left;
            }
            }
        return successor;
}



